import Head from "next/head";
import Image from "next/image";
import "react-responsive-carousel/lib/styles/carousel.min.css";
import { Cookie, Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import useAuth from "@/hooks/useAuth";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import axios from "axios";
import { useRouter } from "next/router";
import TrackCard from "@/components/TrackCard";
import { Box } from "@mui/system";
import { Typography } from "@mui/material";
import { colors } from "@/theme/AppThemeProvider";
import PlayCircleIcon from "@mui/icons-material/PlayCircle";
import Circular from "@/components/Circular";
import ArtistCard from "@/components/ArtistCard";
import FollowedArtistsContainer from "@/components/FollowedArtistsContainer";
import TopCharts from "@/components/TopCharts";
import TopChartCarousel from "@/components/TopChartCarousel";
import SongCard from "@/components/SongCard";
import recentTracks from "./api/recentTracks";

const inter = Inter({ subsets: ["latin"] });
type topTrack = {
  name: string;
  artists: string;
  image: string;
};

type topArtists = {
  id: string;
  image: string;
  name: string;
  type: string;
};

type followedArtist = {
  followers: number;
  genres: string;
  id: string;
  image: string;
  name: string;
  type: string;
};

export default function Home({ code }: { code: string }) {
  const [loading, setLoading] = useState(true);
  console.log(loading);
  const [user, setUser] = useState<string>("");
  const [topTracksArray, setTracksArray] = useState<topTrack[]>([]);

  const [topArtists, setTopArtists] = useState<topArtists[]>([]);

  const [followedArtists, setFollowedArtists] = useState<followedArtist[]>([]);
  console.log("followed", followedArtists);
  const [newReleases, setNewReleases] = useState([]);
  const [recentPlay, setRecentPlay] = useState([]);
  console.log("recent", recentPlay);
  const router = useRouter();

  var currentTime = new Date().getTime();
  console.log(currentTime);

  useEffect(() => {
    const token = Cookies.get("access_token");

    const getUserName = async () => {
      console.log(token);
      const data = await axios.post("/api/userName", {
        token: token,
      });
      console.log(data);
    };

    const getTopTracks = async () => {
      const response = await axios.post("/api/topTracks", {
        token,
      });
      console.log("res");
      setTracksArray(response.data);
    };
    const getTopArtists = async () => {
      const response = await axios.post("/api/topArtists", {
        token,
      });
      setTopArtists(response.data);
    };

    const getFollowedArtist = async () => {
      const response = await axios.post("/api/followedArtists", {
        token,
      });
      setFollowedArtists(response.data);
    };

    const getNewRelease = async () => {
      const response = await axios.post("/api/newRelease", {
        token,
      });
      setNewReleases(response.data);
    };

    const getRecentTracks = async () => {
      const response = await axios.post("/api/recentTracks", {
        token,
      });
      setRecentPlay(response.data);
    };

    const stack = async () => {
      await getUserName();
      await getTopTracks();
      await getTopArtists();
      await getFollowedArtist();
      await getNewRelease();
      await getRecentTracks();
      setLoading(false);
    };
    stack();
  }, []);

  if (loading) return <Circular></Circular>;

  return (
    <>
      <Head>
        c<title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box>
        <TopChartCarousel props={newReleases} />
        <Typography
          variant="h3"
          sx={{
            my: 3,
            borderBottom: `1px solid ${colors.greyAccent[300]}`,
            pb: 1,
            fontWeight: 600,
            color: colors.primary[700],
          }}
        >
          <PlayCircleIcon
            sx={{
              position: "relative",
              top: "3px",
              mr: 1,
              color: colors.secondary[500],
            }}
          />
          Your most listened tracks
        </Typography>

        <Box
          sx={{
            display: "flex",
            flexWrap: "wrap",
            justifyContent: "space-evenly",
            columnGap: 1,
            rowGap: 2,
            mr: 4,
          }}
        >
          {topTracksArray.map((item: topTrack, index: number) => {
            return (
              <TrackCard
                key={index}
                name={item.name}
                artist={item.artists}
                image={item.image}
              />
            );
          })}
        </Box>

        <Typography
          variant="h3"
          sx={{
            my: 3,
            borderBottom: `1px solid ${colors.greyAccent[300]}`,
            pb: 1,
            fontWeight: 600,
            color: colors.primary[700],
            mt: 8,
          }}
        >
          <PlayCircleIcon
            sx={{
              position: "relative",
              top: "3px",
              mr: 1,
              color: colors.secondary[500],
            }}
          />
          Most visited artists
        </Typography>
        <Box
          sx={{
            overflowX: "scroll",
            whiteSpace: "nowrap",
            "&::-webkit-scrollbar": {
              height: 0,
            },

            width: "85vw",
          }}
        >
          {topArtists.map((item, index) => {
            return <ArtistCard item={item} key={index} />;
          })}
        </Box>
        <Typography
          variant="h3"
          sx={{
            my: 3,
            borderBottom: `1px solid ${colors.greyAccent[300]}`,
            pb: 1,
            fontWeight: 600,
            color: colors.primary[700],
            mt: 8,
          }}
        >
          <PlayCircleIcon
            sx={{
              position: "relative",
              top: "3px",
              mr: 1,
              color: colors.secondary[500],
            }}
          />
          Recently Listened Tracks
        </Typography>
        <Box
          sx={{
            overflowX: "scroll",
            whiteSpace: "nowrap",
            "&::-webkit-scrollbar": {
              height: 0,
            },
            width: "85vw",
          }}
        >
          {recentPlay.map((item: any, index: number) => {
            return <SongCard prop={item} key={index} />;
          })}
        </Box>
      </Box>
    </>
  );
}
